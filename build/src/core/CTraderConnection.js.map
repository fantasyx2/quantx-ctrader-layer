{"version":3,"file":"CTraderConnection.js","sourceRoot":"","sources":["../../../src/core/CTraderConnection.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from \"path\";\r\nimport {v1} from \"uuid\";\r\nimport axios from \"axios\";\r\nimport {CTraderCommandMap} from \"#commands/CTraderCommandMap\";\r\nimport {CTraderEncoderDecoder} from \"#encoder-decoder/CTraderEncoderDecoder\";\r\nimport {CTraderSocket} from \"#sockets/CTraderSocket\";\r\nimport {GenericObject} from \"#utilities/GenericObject\";\r\nimport {CTraderProtobufReader} from \"#protobuf/CTraderProtobufReader\";\r\nimport {CTraderConnectionParameters} from \"#CTraderConnectionParameters\";\r\nimport {CTraderCommand} from \"#commands/CTraderCommand\";\r\nimport {CTraderLayerEmitter} from \"#utilities/emitters/CTraderLayerEmitter\";\r\nimport {CTraderLayerEventListener} from \"#events/CTraderLayerEventListener\";\r\nimport {CTraderLayerEvent} from \"#events/CTraderLayerEvent\";\r\n\r\nexport class CTraderConnection {\r\n    readonly #commandMap: CTraderCommandMap;\r\n    readonly #encoderDecoder: CTraderEncoderDecoder;\r\n    readonly #protobufReader;\r\n    readonly #socket: CTraderSocket;\r\n    readonly #emitter: CTraderLayerEmitter;\r\n    #resolveConnectionPromise?: (...parameters: any[]) => void;\r\n    #rejectConnectionPromise?: (...parameters: any[]) => void;\r\n\r\n    public constructor({host, port,}: CTraderConnectionParameters) {\r\n        this.#commandMap = new CTraderCommandMap({send: (data: any): void => this.#send(data),});\r\n        this.#encoderDecoder = new CTraderEncoderDecoder();\r\n        this.#protobufReader = new CTraderProtobufReader([{\r\n            file: path.resolve(__dirname, \"../../../protobuf/OpenApiCommonMessages.proto\"),\r\n        }, {\r\n            file: path.resolve(__dirname, \"../../../protobuf/OpenApiMessages.proto\"),\r\n        },]);\r\n        this.#socket = new CTraderSocket({host, port,});\r\n        this.#emitter = new CTraderLayerEmitter();\r\n        this.#resolveConnectionPromise = undefined;\r\n        this.#rejectConnectionPromise = undefined;\r\n\r\n        this.#encoderDecoder.setDecodeHandler((data) => this.onDecodedData(this.#protobufReader.decode(data)));\r\n        this.#protobufReader.load();\r\n        this.#protobufReader.build();\r\n\r\n        this.#socket.onOpen = (): void => this.#onOpen();\r\n        this.#socket.onData = (data: any): void => this.onData(data);\r\n        this.#socket.onClose = (): void => this.onClose();\r\n        this.#socket.onError = (): void => this.onError();\r\n    }\r\n\r\n    public isConnecting(): boolean {\r\n        if (!this.#socket.tlsSocket) {\r\n            return false;\r\n        }\r\n        return this.#socket.tlsSocket.connecting\r\n    }\r\n\r\n    public getPayloadTypeByName(name: string): number {\r\n        return this.#protobufReader.getPayloadTypeByName(name);\r\n    }\r\n\r\n    public getPayloadNameByType(type: number): string {\r\n        return this.#protobufReader.getPayloadNameByType(type);\r\n    }\r\n\r\n    async sendCommand(payloadName: string, data?: GenericObject, messageId?: string): Promise<GenericObject> {\r\n        const clientMsgId: string = messageId ?? v1();\r\n        const payloadType: number = this.getPayloadTypeByName(payloadName);\r\n        const message: any = this.#protobufReader.encode(payloadType, data ?? {}, clientMsgId);\r\n        const responsePromise: Promise<GenericObject> = this.#commandMap.create({clientMsgId, message,});\r\n\r\n        if (payloadName.substr(-5).toUpperCase() === \"EVENT\") {\r\n            const sentCommand: CTraderCommand = this.#commandMap.extractById(clientMsgId) as CTraderCommand;\r\n\r\n            sentCommand.resolve({});\r\n        }\r\n\r\n        if (payloadName.substr(-3).toUpperCase() === \"REQ\") {\r\n            const responsePayloadType: number = this.getPayloadTypeByName(`${payloadName.substr(0, payloadName.length - 3)}Res`);\r\n\r\n            if (responsePayloadType === -1) {\r\n                const sentCommand: CTraderCommand = this.#commandMap.extractById(clientMsgId) as CTraderCommand;\r\n\r\n                sentCommand.resolve({});\r\n            }\r\n        }\r\n\r\n        return responsePromise;\r\n    }\r\n\r\n    async trySendCommand(payloadName: string, data?: GenericObject, messageId?: string): Promise<GenericObject | undefined> {\r\n        try {\r\n            return await this.sendCommand(payloadName, data, messageId);\r\n        } catch {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    public sendHeartbeat(): void {\r\n        this.sendCommand(\"ProtoHeartbeatEvent\");\r\n    }\r\n\r\n    public open(): Promise<unknown> {\r\n        const connectionPromise = new Promise((resolve, reject) => {\r\n            this.#resolveConnectionPromise = resolve;\r\n            this.#rejectConnectionPromise = reject;\r\n        });\r\n\r\n        this.#socket.connect();\r\n\r\n        return connectionPromise;\r\n    }\r\n\r\n    public close(): void {\r\n        this.#socket.disconnect();\r\n    }\r\n\r\n    public on(payloadName: string): Promise<CTraderLayerEvent>\r\n    public on(payloadName: string, listener: CTraderLayerEventListener): string\r\n    public on(payloadName: string, listener?: CTraderLayerEventListener): Promise<CTraderLayerEvent> | string {\r\n        const payloadType: string = this.getPayloadTypeByName(payloadName).toString();\r\n\r\n        if (!listener) {\r\n            return this.#emitter.on(payloadType);\r\n        }\r\n\r\n        return this.#emitter.on(payloadType, listener);\r\n    }\r\n\r\n    public removeEventListener(uuid: string): void {\r\n        this.#emitter.removeEventListener(uuid);\r\n    }\r\n\r\n    #send(data: GenericObject): void {\r\n        this.#socket.send(this.#encoderDecoder.encode(data));\r\n    }\r\n\r\n    #onOpen(): void {\r\n        if (this.#resolveConnectionPromise) {\r\n            this.#resolveConnectionPromise();\r\n        }\r\n\r\n        this.#resolveConnectionPromise = undefined;\r\n        this.#rejectConnectionPromise = undefined;\r\n    }\r\n\r\n    onData(data: Buffer): void {\r\n        this.#encoderDecoder.decode(data);\r\n    }\r\n\r\n    onDecodedData(data: GenericObject): void {\r\n        const payloadType = data.payloadType;\r\n        const payload = data.payload;\r\n        const clientMsgId = data.clientMsgId;\r\n        const sentCommand = this.#commandMap.extractById(clientMsgId);\r\n        const normalizedPayload = JSON.parse(payload.encodeJSON());\r\n        const payloadName: string = this.getPayloadNameByType(payloadType);\r\n\r\n        if (clientMsgId) {\r\n            normalizedPayload.clientMsgId = clientMsgId;\r\n        }\r\n\r\n        if (payloadName.substr(-5).toUpperCase() === \"EVENT\") {\r\n            this.#onPushEvent(payloadType, normalizedPayload);\r\n        } else if (payloadName.substr(-3).toUpperCase() === \"RES\" && sentCommand) {\r\n            if (typeof payload.errorCode === \"string\" || typeof payload.errorCode === \"number\") {\r\n                sentCommand.reject(normalizedPayload);\r\n            } else {\r\n                sentCommand.resolve(normalizedPayload);\r\n            }\r\n        } else {\r\n            console.log(`Unknown payload type ${payloadType}`);\r\n        }\r\n    }\r\n\r\n    onClose(): void {\r\n        // Silence is golden.\r\n    }\r\n\r\n    onError(): void {\r\n        // Silence is golden.\r\n    }\r\n\r\n    #onPushEvent(payloadType: number, message: GenericObject): void {\r\n        this.#emitter.notifyListeners(payloadType.toString(), message);\r\n    }\r\n\r\n    public static async getAccessTokenProfile(accessToken: string): Promise<GenericObject> {\r\n        const URI = `https://api.spotware.com/connect/profile?access_token=${accessToken}`;\r\n\r\n        return JSON.parse((await axios.get(URI)).data);\r\n    }\r\n\r\n    public static async getAccessTokenAccounts(accessToken: string): Promise<GenericObject[]> {\r\n        const URI = `https://api.spotware.com/connect/tradingaccounts?access_token=${accessToken}`;\r\n        const parsedResponse: any = JSON.parse((await axios.get(URI)).data);\r\n\r\n        if (!Array.isArray(parsedResponse)) {\r\n            return [];\r\n        }\r\n\r\n        return parsedResponse;\r\n    }\r\n}\r\n"]}