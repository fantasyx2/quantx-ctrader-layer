{"version":3,"file":"CTraderProtobufReader.js","sourceRoot":"","sources":["../../../../src/core/protobuf/CTraderProtobufReader.ts"],"names":[],"mappings":"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","sourcesContent":["import { GenericObject } from \"#utilities/GenericObject\";\r\n\r\nconst protobuf = require(\"protobufjs\");\r\n\r\nexport class CTraderProtobufReader {\r\n    #params: any;\r\n    #builder: any;\r\n    readonly #payloadTypes: {\r\n        [key: string]: any;\r\n    };\r\n    readonly #names: any;\r\n    readonly #messages: any;\r\n    readonly #enums: any;\r\n\r\n    public constructor (options: GenericObject) {\r\n        this.#params = options;\r\n        this.#builder = undefined;\r\n        this.#payloadTypes = {};\r\n        this.#names = {};\r\n        this.#messages = {};\r\n        this.#enums = {};\r\n    }\r\n\r\n    public encode (payloadType: number, params: GenericObject, clientMsgId: string): any {\r\n        const Message = this.getMessageByPayloadType(payloadType);\r\n        const message = new Message(params);\r\n\r\n        return this.#wrap(payloadType, message, clientMsgId).encode();\r\n    }\r\n\r\n    public decode (buffer: GenericObject): any {\r\n        const protoMessage = this.getMessageByName(\"ProtoMessage\").decode(buffer);\r\n        const payloadType = protoMessage.payloadType;\r\n\r\n        return {\r\n            payload: this.getMessageByPayloadType(payloadType).decode(protoMessage.payload),\r\n            payloadType: payloadType,\r\n            clientMsgId: protoMessage.clientMsgId,\r\n        };\r\n    }\r\n\r\n    #wrap (payloadType: number, message: GenericObject, clientMsgId: string): any {\r\n        const ProtoMessage = this.getMessageByName(\"ProtoMessage\");\r\n\r\n        return new ProtoMessage({\r\n            payloadType: payloadType,\r\n            payload: message.toBuffer(),\r\n            clientMsgId: clientMsgId,\r\n        });\r\n    }\r\n\r\n    public load (): void {\r\n        this.#params.forEach((param: any) => {\r\n            this.#builder = protobuf.loadProtoFile(param.file, this.#builder);\r\n        });\r\n    }\r\n\r\n    public build (): any {\r\n        const builder: any = this.#builder;\r\n\r\n        builder.build();\r\n\r\n        const messages: any[] = [];\r\n        const enums: any[] = [];\r\n\r\n        builder.ns.children.forEach((reflect: any) => {\r\n            const className: string = reflect.className;\r\n\r\n            if (className === \"Message\") {\r\n                messages.push(reflect);\r\n            }\r\n            else if (className === \"Enum\") {\r\n                enums.push(reflect);\r\n            }\r\n        });\r\n\r\n        messages.filter((message) => typeof this.findPayloadType(message) === \"number\").forEach((message) => {\r\n            const name: string = message.name;\r\n            const messageBuilded: any = builder.build(name);\r\n\r\n            this.#messages[name] = messageBuilded;\r\n\r\n            const payloadType = this.findPayloadType(message);\r\n\r\n            this.#names[name] = {\r\n                messageBuilded: messageBuilded,\r\n                payloadType: payloadType,\r\n            };\r\n            this.#payloadTypes[payloadType] = {\r\n                messageBuilded: messageBuilded,\r\n                name: name,\r\n            };\r\n        });\r\n\r\n        enums.forEach((enume: any) => {\r\n            const name: string = enume.name;\r\n\r\n            this.#enums[name] = builder.build(name);\r\n        });\r\n\r\n        this.#buildWrapper();\r\n    }\r\n\r\n    #buildWrapper (): void {\r\n        const name = \"ProtoMessage\";\r\n        const messageBuilded = this.#builder.build(name);\r\n\r\n        this.#messages[name] = messageBuilded;\r\n        this.#names[name] = {\r\n            messageBuilded: messageBuilded,\r\n            payloadType: undefined,\r\n        };\r\n    }\r\n\r\n    public findPayloadType (message: GenericObject): any {\r\n        const field = message.children.find((field: any) => field.name === \"payloadType\");\r\n\r\n        if (!field) {\r\n            return undefined;\r\n        }\r\n\r\n        return field.defaultValue;\r\n    }\r\n\r\n    public getMessageByPayloadType (payloadType: number): any {\r\n        return this.#payloadTypes[payloadType].messageBuilded;\r\n    }\r\n\r\n    public getMessageByName (name: string): any {\r\n        return this.#names[name].messageBuilded;\r\n    }\r\n\r\n    public getPayloadTypeByName (name: string): number {\r\n        return this.#names[name]?.payloadType ?? -1;\r\n    }\r\n\r\n    public getPayloadNameByType (type: number): string {\r\n        for (const name of Object.keys(this.#names)) {\r\n            if (this.#names[name].payloadType === type) {\r\n                return name;\r\n            }\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n}\r\n"]}