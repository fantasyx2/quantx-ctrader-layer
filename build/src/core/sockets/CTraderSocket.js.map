{"version":3,"file":"CTraderSocket.js","sourceRoot":"","sources":["../../../../src/core/sockets/CTraderSocket.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2BAA2B;AAE3B,8EAAuE;AAEvE,MAAM,SAAS,GAAY,6CAAqB,CAAC,SAAS,EAAE,CAAC;AAE7D,MAAa,aAAa;IAMtB,YAAmB,EAAC,IAAI,EAAE,IAAI,GAA2B;QALzD,sCAAuB;QACvB,sCAAuB;QACvB,2CAA2B;QAC3B,2CAAuB;QAGnB,uBAAA,IAAI,uBAAS,IAAI,MAAA,CAAC;QAClB,uBAAA,IAAI,uBAAS,IAAI,MAAA,CAAC;QAClB,uBAAA,IAAI,4BAAc,SAAS,MAAA,CAAC;QAC5B,uBAAA,IAAI,4BAAc,SAAS,MAAA,CAAC;IAChC,CAAC;IAED,IAAW,IAAI;QACX,OAAO,uBAAA,IAAI,2BAAM,CAAC;IACtB,CAAC;IAED,IAAW,IAAI;QACX,OAAO,uBAAA,IAAI,2BAAM,CAAC;IACtB,CAAC;IAED,IAAW,SAAS;QAChB,OAAO,uBAAA,IAAI,gCAAW,CAAC;IAC3B,CAAC;IAEM,OAAO;QACV,IAAI,SAAS,EAAE;YACX,MAAM,MAAM,GAAG,IAAI,SAAS,CAAC,SAAS,uBAAA,IAAI,2BAAM,IAAI,uBAAA,IAAI,2BAAM,EAAE,CAAC,CAAC;YAClE,MAAM,CAAC,UAAU,GAAG,aAAa,CAAC;YAElC,MAAM,CAAC,gBAAgB,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAC7C,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAChD,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YAC/C,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YAE/C,uBAAA,IAAI,4BAAc,MAAM,MAAA,CAAC;SAC5B;aAAM;YAEH,IAAI,OAAO,GAAG;gBACV,IAAI,EAAE,uBAAA,IAAI,2BAAM;gBAChB,IAAI,EAAE,uBAAA,IAAI,2BAAM;aAEnB,CAAA;YACD,MAAM,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YACjD,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAC/B,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YAC/B,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YAEjC,uBAAA,IAAI,4BAAc,MAAM,MAAA,CAAC;SAC5B;IACL,CAAC;IAEM,UAAU;;QACb,MAAA,uBAAA,IAAI,gCAAW,0CAAE,OAAO,EAAE,CAAC;QAC3B,MAAA,uBAAA,IAAI,gCAAW,0CAAE,KAAK,EAAE,CAAC;IAC7B,CAAC;IAEM,IAAI,CAAC,MAAc;;QACtB,MAAA,uBAAA,IAAI,gCAAW,0CAAE,KAAK,CAAC,MAAM,CAAC,CAAC;QAC/B,MAAA,uBAAA,IAAI,gCAAW,0CAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC;IAEM,MAAM;IAEb,CAAC;IAEM,MAAM,CAAC,GAAG,UAAiB;IAElC,CAAC;IAEM,OAAO;IAEd,CAAC;IAEM,OAAO;IAEd,CAAC;CACJ;AA7ED,sCA6EC","sourcesContent":["import * as tls from \"tls\";\r\nimport {CTraderSocketParameters} from \"#sockets/CTraderSocketParameters\";\r\nimport {CTraderLayerUtilities} from \"#utilities/CTraderLayerUtilities\";\r\n\r\nconst isBrowser: boolean = CTraderLayerUtilities.isBrowser();\r\n\r\nexport class CTraderSocket {\r\n    readonly #host: string;\r\n    readonly #port: number;\r\n    #tlsSocket?: tls.TLSSocket;\r\n    #webSocket?: WebSocket;\r\n\r\n    public constructor({host, port,}: CTraderSocketParameters) {\r\n        this.#host = host;\r\n        this.#port = port;\r\n        this.#tlsSocket = undefined;\r\n        this.#webSocket = undefined;\r\n    }\r\n\r\n    public get host(): string {\r\n        return this.#host;\r\n    }\r\n\r\n    public get port(): number {\r\n        return this.#port;\r\n    }\r\n\r\n    public get tlsSocket(): tls.TLSSocket | undefined {\r\n        return this.#tlsSocket;\r\n    }\r\n\r\n    public connect(): void {\r\n        if (isBrowser) {\r\n            const socket = new WebSocket(`wss://${this.#host}:${this.#port}`);\r\n            socket.binaryType = \"arraybuffer\";\r\n\r\n            socket.addEventListener(\"open\", this.onOpen);\r\n            socket.addEventListener(\"message\", this.onData);\r\n            socket.addEventListener(\"close\", this.onClose);\r\n            socket.addEventListener(\"error\", this.onError);\r\n\r\n            this.#webSocket = socket;\r\n        } else {\r\n            // @ts-ignore\r\n            let options = {\r\n                host: this.#host,\r\n                port: this.#port,\r\n                // timeout: 5,\r\n            }\r\n            const socket = tls.connect(options, this.onOpen);\r\n            socket.on(\"data\", this.onData);\r\n            socket.on(\"end\", this.onClose);\r\n            socket.on(\"error\", this.onError);\r\n\r\n            this.#tlsSocket = socket;\r\n        }\r\n    }\r\n\r\n    public disconnect(): void {\r\n        this.#tlsSocket?.destroy();\r\n        this.#webSocket?.close();\r\n    }\r\n\r\n    public send(buffer: Buffer): void {\r\n        this.#tlsSocket?.write(buffer);\r\n        this.#webSocket?.send(buffer);\r\n    }\r\n\r\n    public onOpen(): void {\r\n        // Silence is golden\r\n    }\r\n\r\n    public onData(...parameters: any[]): void {\r\n        // Silence is golden\r\n    }\r\n\r\n    public onClose(): void {\r\n        // Silence is golden\r\n    }\r\n\r\n    public onError(): void {\r\n        // Silence is golden\r\n    }\r\n}\r\n"]}