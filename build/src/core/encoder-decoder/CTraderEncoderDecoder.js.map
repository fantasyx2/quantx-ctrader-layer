{"version":3,"file":"CTraderEncoderDecoder.js","sourceRoot":"","sources":["../../../../src/core/encoder-decoder/CTraderEncoderDecoder.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,mCAAgC;AAEhC,8EAAyE;AAEzE,MAAM,SAAS,GAAY,6CAAqB,CAAC,SAAS,EAAE,CAAC;AAE7D,MAAa,qBAAqB;IAM9B;QALA,oDAA6B;QAC7B,8CAAe;QACf,8CAAe;QACf,uDAA+C;QAG3C,uBAAA,IAAI,qCAAe,CAAC,MAAA,CAAC;QACrB,uBAAA,IAAI,+BAAS,SAAS,MAAA,CAAC;QACvB,uBAAA,IAAI,+BAAS,SAAS,MAAA,CAAC;QACvB,uBAAA,IAAI,wCAAkB,SAAS,MAAA,CAAC;IACpC,CAAC;IAEM,gBAAgB,CAAE,OAAsC;QAC3D,uBAAA,IAAI,wCAAkB,OAAO,MAAA,CAAC;IAClC,CAAC;IAEM,MAAM,CAAE,IAAmB;QAC9B,MAAM,cAAc,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAEvC,IAAI,SAAS,EAAE;YACX,OAAO,cAAc,CAAC;SACzB;QAED,MAAM,UAAU,GAAW,uBAAA,IAAI,yCAAY,CAAC;QAC5C,MAAM,oBAAoB,GAAW,cAAc,CAAC,MAAM,CAAC;QAC3D,MAAM,IAAI,GAAG,eAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAEtC,IAAI,CAAC,YAAY,CAAC,oBAAoB,EAAE,CAAC,CAAC,CAAC;QAE3C,OAAO,eAAM,CAAC,MAAM,CAAC,CAAE,IAAI,EAAE,cAAc,EAAG,EAAE,UAAU,GAAG,oBAAoB,CAAC,CAAC;IACvF,CAAC;IAEM,MAAM,CAAE,MAAc;QACzB,IAAI,SAAS,EAAE;YACX,IAAI,uBAAA,IAAI,4CAAe,EAAE;gBAErB,uBAAA,IAAI,4CAAe,MAAnB,IAAI,EAAgB,MAAM,CAAC,IAAI,CAAC,CAAC;aACpC;YAED,OAAO;SACV;QAED,MAAM,IAAI,GAAuB,uBAAA,IAAI,mCAAM,CAAC;QAC5C,IAAI,UAAU,GAAW,MAAM,CAAC;QAEhC,IAAI,uBAAA,IAAI,mCAAM,EAAE;YACZ,UAAU,GAAG,eAAM,CAAC,MAAM,CAAC,CAAE,uBAAA,IAAI,mCAAM,EAAE,UAAU,EAAG,EAAE,uBAAA,IAAI,mCAAM,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;YAE/F,uBAAA,IAAI,+BAAS,SAAS,MAAA,CAAC;SAC1B;QAED,IAAI,IAAI,EAAE;YACN,IAAI,UAAU,CAAC,MAAM,IAAI,IAAI,EAAE;gBAC3B,IAAI,uBAAA,IAAI,4CAAe,EAAE;oBACrB,uBAAA,IAAI,4CAAe,MAAnB,IAAI,EAAgB,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;iBAClD;gBAED,uBAAA,IAAI,+BAAS,SAAS,MAAA,CAAC;gBAEvB,IAAI,UAAU,CAAC,MAAM,KAAK,IAAI,EAAE;oBAC5B,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;iBACvC;gBAED,OAAO;aACV;SACJ;aACI;YACD,IAAI,UAAU,CAAC,MAAM,IAAI,uBAAA,IAAI,yCAAY,EAAE;gBACvC,uBAAA,IAAI,+BAAS,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,MAAA,CAAC;gBAExC,IAAI,UAAU,CAAC,MAAM,KAAK,uBAAA,IAAI,yCAAY,EAAE;oBACxC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,uBAAA,IAAI,yCAAY,CAAC,CAAC,CAAC;iBACnD;gBAED,OAAO;aACV;SACJ;QAED,uBAAA,IAAI,+BAAS,UAAU,MAAA,CAAC;IAC5B,CAAC;CACJ;AAjFD,sDAiFC","sourcesContent":["import { Buffer } from \"buffer\";\r\nimport { GenericObject } from \"#utilities/GenericObject\";\r\nimport { CTraderLayerUtilities } from \"#utilities/CTraderLayerUtilities\";\r\n\r\nconst isBrowser: boolean = CTraderLayerUtilities.isBrowser();\r\n\r\nexport class CTraderEncoderDecoder {\r\n    readonly #sizeLength: number;\r\n    #size?: number;\r\n    #tail?: Buffer;\r\n    #decodeHandler?: (...parameters: any[]) => any;\r\n\r\n    public constructor () {\r\n        this.#sizeLength = 4;\r\n        this.#size = undefined;\r\n        this.#tail = undefined;\r\n        this.#decodeHandler = undefined;\r\n    }\r\n\r\n    public setDecodeHandler (handler: (...parameters: any[]) => any): void {\r\n        this.#decodeHandler = handler;\r\n    }\r\n\r\n    public encode (data: GenericObject): Buffer {\r\n        const normalizedData = data.toBuffer();\r\n\r\n        if (isBrowser) {\r\n            return normalizedData;\r\n        }\r\n\r\n        const sizeLength: number = this.#sizeLength;\r\n        const normalizedDataLength: number = normalizedData.length;\r\n        const size = Buffer.alloc(sizeLength);\r\n\r\n        size.writeInt32BE(normalizedDataLength, 0);\r\n\r\n        return Buffer.concat([ size, normalizedData, ], sizeLength + normalizedDataLength);\r\n    }\r\n\r\n    public decode (buffer: Buffer): void {\r\n        if (isBrowser) {\r\n            if (this.#decodeHandler) {\r\n                // @ts-ignore\r\n                this.#decodeHandler(buffer.data);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        const size: number | undefined = this.#size;\r\n        let usedBuffer: Buffer = buffer;\r\n\r\n        if (this.#tail) {\r\n            usedBuffer = Buffer.concat([ this.#tail, usedBuffer, ], this.#tail.length + usedBuffer.length);\r\n\r\n            this.#tail = undefined;\r\n        }\r\n\r\n        if (size) {\r\n            if (usedBuffer.length >= size) {\r\n                if (this.#decodeHandler) {\r\n                    this.#decodeHandler(usedBuffer.slice(0, size));\r\n                }\r\n\r\n                this.#size = undefined;\r\n\r\n                if (usedBuffer.length !== size) {\r\n                    this.decode(usedBuffer.slice(size));\r\n                }\r\n\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            if (usedBuffer.length >= this.#sizeLength) {\r\n                this.#size = usedBuffer.readUInt32BE(0);\r\n\r\n                if (usedBuffer.length !== this.#sizeLength) {\r\n                    this.decode(usedBuffer.slice(this.#sizeLength));\r\n                }\r\n\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.#tail = usedBuffer;\r\n    }\r\n}\r\n"]}