{"version":3,"file":"CTraderLayerEmitter.js","sourceRoot":"","sources":["../../../../../src/core/utilities/emitters/CTraderLayerEmitter.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,sEAA8D;AAG9D,+BAA0B;AAE1B,MAAa,mBAAmB;IAI5B;;QAFA,iDAAyE;QAGrE,uBAAA,IAAI,kCAAc,IAAI,GAAG,EAAE,MAAA,CAAC;IAChC,CAAC;IAEM,gBAAgB,CAAE,IAAY,EAAE,QAAmC;;QACtE,IAAI,IAAY,CAAC;QAEjB,GAAG;YACC,IAAI,GAAG,IAAA,SAAE,GAAE,CAAC;SACf,QACM,uBAAA,IAAI,uEAAY,MAAhB,IAAI,EAAa,IAAI,CAAC,EAAE;QAE/B,MAAM,eAAe,GAA2C,MAAA,uBAAA,IAAI,sCAAW,CAAC,GAAG,CAAC,IAAI,CAAC,mCAAI,IAAI,GAAG,EAAE,CAAC;QAEvG,eAAe,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QACpC,uBAAA,IAAI,sCAAW,CAAC,GAAG,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;QAE3C,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,mBAAmB,CAAE,IAAY;QACpC,KAAK,MAAM,IAAI,IAAI,uBAAA,IAAI,sCAAW,CAAC,IAAI,EAAE,EAAE;YACvC,MAAM,eAAe,GAAuD,uBAAA,IAAI,sCAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAEtG,IAAI,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,GAAG,CAAC,IAAI,CAAC,EAAE;gBAC5B,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAE7B,MAAM;aACT;SACJ;IACL,CAAC;IAIM,EAAE,CAAE,IAAY,EAAE,QAAoC;QACzD,IAAI,CAAC,QAAQ,EAAE;YACX,OAAO,IAAI,OAAO,CAAC,CAAC,OAAY,EAAQ,EAAE;gBACtC,MAAM,IAAI,GAAW,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAO,KAAwB,EAAiB,EAAE;oBAC/F,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;oBAC/B,OAAO,CAAC,KAAK,CAAC,CAAC;gBACnB,CAAC,CAAA,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;SACN;QAED,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACjD,CAAC;IAEM,eAAe,CAAE,IAAY,EAAE,UAA0B;;QAC5D,MAAM,IAAI,GAAS,IAAI,IAAI,EAAE,CAAC;QAC9B,MAAM,KAAK,GAAsB,IAAI,qCAAiB,CAAC;YACnD,IAAI;YACJ,IAAI;YACJ,UAAU;SACb,CAAC,CAAC;QAEH,IAAI,IAAI,KAAK,uBAAA,mBAAmB,6CAAc,EAAE;YAC5C,MAAM,cAAc,GAA2C,MAAA,uBAAA,IAAI,sCAAW,CAAC,GAAG,CAAC,uBAAA,mBAAmB,6CAAc,CAAC,mCAAI,IAAI,GAAG,EAAE,CAAC;YAEnI,KAAK,MAAM,QAAQ,IAAI,cAAc,CAAC,MAAM,EAAE,EAAE;gBAC5C,QAAQ,CAAC,KAAK,CAAC,CAAC;aACnB;SACJ;QAED,MAAM,eAAe,GAA2C,MAAA,uBAAA,IAAI,sCAAW,CAAC,GAAG,CAAC,IAAI,CAAC,mCAAI,IAAI,GAAG,EAAE,CAAC;QAEvG,KAAK,MAAM,QAAQ,IAAI,eAAe,CAAC,MAAM,EAAE,EAAE;YAC7C,QAAQ,CAAC,KAAK,CAAC,CAAC;SACnB;IACL,CAAC;;AAxEL,kDAqFC;qMAXgB,IAAY;IACrB,KAAK,MAAM,GAAG,IAAI,uBAAA,IAAI,sCAAW,CAAC,IAAI,EAAE,EAAE;QACtC,MAAM,SAAS,GAAuD,uBAAA,IAAI,sCAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAE/F,IAAI,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,GAAG,CAAC,IAAI,CAAC,EAAE;YACtB,OAAO,IAAI,CAAC;SACf;KACJ;IAED,OAAO,KAAK,CAAC;AACjB,CAAC;AAnFM,6CAAiC,GAAG,GAAC","sourcesContent":["import { CTraderLayerEvent } from \"#events/CTraderLayerEvent\";\r\nimport { CTraderLayerEventListener } from \"#events/CTraderLayerEventListener\";\r\nimport { GenericObject } from \"#utilities/GenericObject\";\r\nimport { v1 } from \"uuid\";\r\n\r\nexport class CTraderLayerEmitter {\r\n    static readonly #ANY_TYPE_KEY: string = \"*\";\r\n    readonly #listeners: Map<string, Map<string, CTraderLayerEventListener>>;\r\n\r\n    public constructor () {\r\n        this.#listeners = new Map();\r\n    }\r\n\r\n    public addEventListener (type: string, listener: CTraderLayerEventListener): string {\r\n        let uuid: string;\r\n\r\n        do {\r\n            uuid = v1();\r\n        }\r\n        while (this.#uuidExists(uuid)); // This software deals with money, better to avoid even the most improbable events\r\n\r\n        const listenersOfType: Map<string, CTraderLayerEventListener> = this.#listeners.get(type) ?? new Map();\r\n\r\n        listenersOfType.set(uuid, listener);\r\n        this.#listeners.set(type, listenersOfType);\r\n\r\n        return uuid;\r\n    }\r\n\r\n    public removeEventListener (uuid: string): void {\r\n        for (const type of this.#listeners.keys()) {\r\n            const listenersOfType: Map<string, CTraderLayerEventListener> | undefined = this.#listeners.get(type);\r\n\r\n            if (listenersOfType?.has(uuid)) {\r\n                listenersOfType.delete(uuid);\r\n\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public on (type: string): Promise<CTraderLayerEvent>\r\n    public on (type: string, listener: CTraderLayerEventListener): string\r\n    public on (type: string, listener?: CTraderLayerEventListener): Promise<CTraderLayerEvent> | string {\r\n        if (!listener) {\r\n            return new Promise((resolve: any): void => {\r\n                const uuid: string = this.addEventListener(type, async (event: CTraderLayerEvent): Promise<void> => {\r\n                    this.removeEventListener(uuid);\r\n                    resolve(event);\r\n                });\r\n            });\r\n        }\r\n\r\n        return this.addEventListener(type, listener);\r\n    }\r\n\r\n    public notifyListeners (type: string, descriptor?: GenericObject): void {\r\n        const date: Date = new Date();\r\n        const event: CTraderLayerEvent = new CTraderLayerEvent({\r\n            type,\r\n            date,\r\n            descriptor,\r\n        });\r\n\r\n        if (type !== CTraderLayerEmitter.#ANY_TYPE_KEY) {\r\n            const listenersOfAny: Map<string, CTraderLayerEventListener> = this.#listeners.get(CTraderLayerEmitter.#ANY_TYPE_KEY) ?? new Map();\r\n\r\n            for (const listener of listenersOfAny.values()) {\r\n                listener(event);\r\n            }\r\n        }\r\n\r\n        const listenersOfType: Map<string, CTraderLayerEventListener> = this.#listeners.get(type) ?? new Map();\r\n\r\n        for (const listener of listenersOfType.values()) {\r\n            listener(event);\r\n        }\r\n    }\r\n\r\n    #uuidExists (uuid: string): boolean {\r\n        for (const key of this.#listeners.keys()) {\r\n            const listeners: Map<string, CTraderLayerEventListener> | undefined = this.#listeners.get(key);\r\n\r\n            if (listeners?.has(uuid)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n"]}